<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为虚拟机配置静态ip(CentOS 6.5)</title>
      <link href="/2019/03/18/%E4%B8%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
      <url>/2019/03/18/%E4%B8%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip/</url>
      
        <content type="html"><![CDATA[<p>我们先打开虚拟机输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure></p><p>添加下面的内容如果原来有就在原来的基础上修改，没有的加上<br><a id="more"></a></p><blockquote><p>DEVICE=eth0<br>BOOTPROTO=static<br>ONBOOT=yes<br>IPADDR=192.168.1.180<br>NETMASK=255.255.255.0<br>GATEWAY=192.168.1.1<br>DNS1=192.168.1.1</p></blockquote><p>一下是对配置的一些说明</p><blockquote><p>DEVICE=eth0 #描述网卡对应的设备别名</p></blockquote><blockquote><p>BOOTPROTO=static #设置网卡获得ip地址的方式，可能的选项为<br>static，dhcp或bootp，分别对应静态指定的 ip地址，通过dhcp协议获得的ip地址，通过bootp协议获得的ip地址</p></blockquote><blockquote><p>ONBOOT=yes 自动联网</p></blockquote><blockquote><p>IPADDR=192.168.0.180 #如果设置网卡获得ip地址的方式为静态指定，此字段就指定了网卡对应的ip地址</p></blockquote><blockquote><p>NETMASK=255.255.255.0 #网卡对应的网络掩码</p></blockquote><blockquote><p>GATEWAY=192.168.0.1 #默认网关的IP地址，可以在另外一台windows系统中用cmd然后使用ipconfig查到</p></blockquote><blockquote><p>DNS1=192.168.0.1 #DNS1服务器的地址，可以在另外一台windows系统中用cmd使用nslookup查到</p></blockquote><p>配置完成后重启网络<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></p><p>最后我们可以ping测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.4399.com</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机&amp;编程 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql用户权限管理</title>
      <link href="/2019/03/18/mysql%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2019/03/18/mysql%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一权限的两阶段验证"><a href="#一权限的两阶段验证" class="headerlink" title="一权限的两阶段验证"></a>一权限的两阶段验证</h3><blockquote><p>服务器检测是否允许连接用户名密码地址(主机)</p></blockquote><blockquote><p>检测请求有没有权限实施</p></blockquote><a id="more"></a><h3 id="二-权限列表"><a href="#二-权限列表" class="headerlink" title="二 权限列表"></a>二 权限列表</h3><table><thead><tr><th>权限</th><th>权限级别</th><th>说明</th></tr></thead><tbody><tr><td>create</td><td>数据库，表或索引</td><td>创建数据库，表或索引权限</td></tr><tr><td>drop</td><td>数据库或表</td><td>删除数据库或表权限</td></tr><tr><td>grant option</td><td>数据库、表或保存的程序</td><td>赋予权限选项</td></tr><tr><td>references</td><td>数据库或表</td><td>外键权限</td></tr><tr><td>alter</td><td>表</td><td>更改表，比如添加字段、索引、修改字段等</td></tr><tr><td>delete</td><td>表</td><td>删除数据权限</td></tr><tr><td>index</td><td>表</td><td>索引权限</td></tr><tr><td>insert</td><td>表</td><td>插入权限</td></tr><tr><td>select</td><td>表</td><td>查询权限</td></tr><tr><td>update</td><td>表</td><td>更新权限</td></tr><tr><td>create view</td><td>视图</td><td>创建视图权限</td></tr><tr><td>show view</td><td>视图</td><td>查看视图权限</td></tr><tr><td>alter routine</td><td>存储过程</td><td>更改存储过程权限</td></tr><tr><td>create routine</td><td>存储过程</td><td>创建存储过程权限</td></tr><tr><td>execute</td><td>存储过程</td><td>执行存储过程权限</td></tr><tr><td>file</td><td>服务器主机上的文件访问</td><td>文件访问权限</td></tr><tr><td>create temporary tables</td><td>服务器管理</td><td>创建临时表权限lock tables</td><td>服务器管理</td><td>锁表权限</td></tr><tr><td>create user</td><td>服务器管理</td><td>创建用户权限</td></tr><tr><td>proccess</td><td>服务器管理</td><td>查看进程权限</td></tr><tr><td>reload</td><td>服务器管理</td><td>执行flush-hosts, flush-logs, flush-privileges, flush-status, flush-tables, flush-threads, refresh, reload等命令的权限</td></tr><tr><td>replication client</td><td>服务器管理</td><td>复制权限</td></tr><tr><td>replication slave</td><td>服务器管理</td><td>复制权限</td></tr><tr><td>show databases</td><td>服务器管理</td><td>查看数据库权限</td></tr><tr><td>shutdown</td><td>服务器管理</td><td>关闭数据库权限</td></tr><tr><td>super</td><td>服务器管理</td><td>执行kill线程权限</td></tr></tbody></table><h3 id="mysql用户权限管理操作"><a href="#mysql用户权限管理操作" class="headerlink" title="mysql用户权限管理操作"></a>mysql用户权限管理操作</h3><h4 id="1权限查询"><a href="#1权限查询" class="headerlink" title="1权限查询"></a>1权限查询</h4><blockquote><p>1查看所有用户及其权限：select*from mysql.user\G</p></blockquote><blockquote><p>2查看当前mysql用户权限：show grants</p></blockquote><blockquote><p>3查看某个用户的权限：show grants for 用户名@主机</p></blockquote><h4 id="2mysql用户创建"><a href="#2mysql用户创建" class="headerlink" title="2mysql用户创建"></a>2mysql用户创建</h4><blockquote><p>1使用create user命令创建：create user ‘用户名‘@’主机’ identified by ‘密码’</p></blockquote><blockquote><p>2直接向数据表mysql.user中插入一条用户记录</p></blockquote><h4 id="3删除用户"><a href="#3删除用户" class="headerlink" title="3删除用户"></a>3删除用户</h4><blockquote><p>drop user ‘用户名‘@’主机’</p></blockquote><h4 id="4给予权限"><a href="#4给予权限" class="headerlink" title="4给予权限"></a>4给予权限</h4><p>刚创建的用户一般是没有权限的使用grant指令进行权限的授予。</p><p>grant指令完整格式：</p><p>grant 权限列表 on 数据库名.数据表名 to ‘用户名’@’主机’ identified by ‘密码’ with grant option;</p><h4 id="5账户重命名"><a href="#5账户重命名" class="headerlink" title="5账户重命名"></a>5账户重命名</h4><blockquote><p>rename user ‘旧用户名‘@’旧主机’ to ‘新用户名‘@’新主机’;</p></blockquote><h4 id="6用户密码修改"><a href="#6用户密码修改" class="headerlink" title="6用户密码修改"></a>6用户密码修改</h4><blockquote><p>1 使用set password命令 set password for ‘用户名‘@’主机’ = password(‘新密码’);</p></blockquote><blockquote><p>2 修改mysql.user表中的password（或authentication_string）字段。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机&amp;编程 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux卸载软件不卸载依赖</title>
      <link href="/2019/03/18/linux%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%8D%B8%E8%BD%BD%E4%BE%9D%E8%B5%96/"/>
      <url>/2019/03/18/linux%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%8D%B8%E8%BD%BD%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<p>rpm -e –nodeps 文件名</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机&amp;编程 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sequeI pro解决连接数据库10秒延迟</title>
      <link href="/2019/03/18/sequeI%20pro%E8%A7%A3%E5%86%B3%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%9310%E7%A7%92%E5%BB%B6%E8%BF%9F/"/>
      <url>/2019/03/18/sequeI%20pro%E8%A7%A3%E5%86%B3%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%9310%E7%A7%92%E5%BB%B6%E8%BF%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="无视验证-禁用DNS解析"><a href="#无视验证-禁用DNS解析" class="headerlink" title="无视验证 禁用DNS解析"></a>无视验证 禁用DNS解析</h4><p>输入 vim /etc/my.cnf</p><p>在里面加入 skip-name-resolve</p><p>保存(wq)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机&amp;编程 </tag>
            
            <tag> 解决问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vi和Vim的简单使用</title>
      <link href="/2019/03/16/Vi%E5%92%8CVim%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/03/16/Vi%E5%92%8CVim%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>vi是是类unix系统下最受欢迎的两个编辑器之一，另一个是Emacs。vi的作者是Bill Joy，Vim可以看成是vi的升级版，他完全兼容vi，它的作者是Bram Moolenaar。vi/vim的学习曲线比较陡峭，不过一旦熟练掌握后，可以大大提高编辑效率。<br><a id="more"></a><br>下面我们简单学习一下Vim的使用：</p><h4 id="vi-vim的模式"><a href="#vi-vim的模式" class="headerlink" title="vi/vim的模式"></a>vi/vim的模式</h4><p><strong>1. 命令模式(浏览模式)</strong></p><p>控制屏幕光标的移动，删除字符、字或行等。</p><p><strong>2. 插入模式</strong></p><p>只有在Insert mode下，才可以做文字输入，按[<code>ESC</code>]键可回到命令行模式</p><p><strong>3. 底行模式</strong></p><p>可以保存文件、退出vi、设置vi、查找等功能</p><h4 id="部分功能使用说明"><a href="#部分功能使用说明" class="headerlink" title="部分功能使用说明"></a>部分功能使用说明</h4><p>一、打开文件、保存、关闭文件(“命令模式”下使用)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi filename //打开filename文件 </span><br><span class="line">:w          //保存文件 </span><br><span class="line">:w 1.txt    //保存至1.txt文件 </span><br><span class="line">:q          //退出编辑器 </span><br><span class="line">:q!         //退出编辑器，且不保存 </span><br><span class="line">:wq         //退出编辑器，且保存文件</span><br><span class="line">:x          //保存内容并退出</span><br></pre></td></tr></table></figure></p><p>二、插入文本或行(在“命令模式”下使用，执行下面命令后将进入“插入模式”，按ESC键可退出“插入模式”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a    //在当前光标位置的右边添加文本 </span><br><span class="line">i    //在当前光标位置的左边添加文本 </span><br><span class="line">A    //在当前行的末尾位置添加文本 </span><br><span class="line">I    //在当前行的开始处添加文本(非空字符的行首) </span><br><span class="line">O    //在当前行的上面新建一行 </span><br><span class="line">o    //在当前行的下面新建一行 </span><br><span class="line">R    //替换(覆盖)当前光标位置及后面的若干文本 </span><br><span class="line">J    //合并光标所在行及下一行为一行(依然在命令模式)</span><br></pre></td></tr></table></figure></p><p>三、移动光标(“命令模式”下使用) </p><p>1、使用上下左右方向键 </p><p>2、命令模式下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    h   //向左</span><br><span class="line">    j   //向下 </span><br><span class="line">    k   //向上</span><br><span class="line">    l   //向右 </span><br><span class="line">    空格键 //向右</span><br><span class="line">    Backspace  //向左</span><br><span class="line">    Enter  //移动到下一行首</span><br><span class="line">    -  //移动到上一行首</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">四、删除、恢复字符或行(“命令模式”下使用)</span><br></pre></td></tr></table></figure></p><pre><code>x       //删除当前字符 nx      //删除从光标开始的n个字符 dd      //删除当前行 ndd     //向下删除当前行在内的n行 u       //撤销上一步操作ctrl+R  //反撤销，和u的功能相反U       //撤销对当前行的所有操作 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">五、搜索(“底行模式”下使用)</span><br></pre></td></tr></table></figure><pre><code>/str    //向光标下搜索str字符串 ?str    //向光标上搜索str字符串 n       //向下搜索前一个搜素动作 N       //向上搜索前一个搜索动作 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">六、跳至指定行(“命令模式”下使用)</span><br></pre></td></tr></table></figure><pre><code>n+        //向下跳n行 n-        //向上跳n行 nG        //跳到行号为n的行 G         //跳至文件的底部 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">七、设置行号(“底行模式”下使用)</span><br></pre></td></tr></table></figure><pre><code>:set  nu     //显示行号 :set nonu    //取消显示行号 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">八、复制、粘贴(“命令模式”下使用)</span><br></pre></td></tr></table></figure><pre><code>yy    //将当前行复制到粘贴板缓冲区，也可以用 &quot;ayy 复制，&quot;a 为粘贴板缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。 nyy   //将当前行向下n行复制到粘贴板缓冲区，也可以用 &quot;anyy 复制，&quot;a 为粘贴板缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。 yw    //复制从光标开始到词尾的字符。 nyw   //复制从光标开始的n个单词。 y^    //复制从光标到行首的内容。y$    //复制从光标到行尾的内容。 p     //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用&quot;ap 进行粘贴。 P     //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用&quot;aP 进行粘贴。 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">九、替换(“命令模式”下使用)</span><br></pre></td></tr></table></figure><pre><code>:s/old/new          //用new替换行中首次出现的old :s/old/new/g        //用new替换行中所有的old :n,m s/old/new/g    //用new替换从n到m行里所有的old :%s/old/new/g       //用new替换当前文件里所有的old </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十、编辑其他文件</span><br></pre></td></tr></table></figure><pre><code>:e otherfilename    //新建一个文件名为otherfilename的文件。</code></pre><p><code>`</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机&amp;编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本命令</title>
      <link href="/2019/03/16/Linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/16/Linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="超级管理员"><a href="#超级管理员" class="headerlink" title="超级管理员"></a>超级管理员</h2><p>CentOS/RedHat系统的超级管理员账号为：root</p><h2 id="开胃小菜"><a href="#开胃小菜" class="headerlink" title="开胃小菜"></a>开胃小菜</h2><p>不懂Linux控制台命令，相当于不懂Linux，因此我们要好好学习。先看几个开胃小菜，打开控制台。<br><a id="more"></a></p><h4 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//方法1</span><br><span class="line">shutdown -h now</span><br><span class="line">//方法2</span><br><span class="line">poweroff</span><br><span class="line">//方法3</span><br><span class="line">halt</span><br></pre></td></tr></table></figure><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//方法1</span><br><span class="line">reboot</span><br><span class="line">//方法2</span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><h4 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logout</span><br></pre></td></tr></table></figure><p>整完了几个开胃小菜，我们发现，命令用起来很爽，只用在键盘上敲几下就能完成以前我们使用各种鼠标+键盘一起配合才能完成的操作。其实我们可以这样理解：原来的图形界面化的操作其实是操作系统通过收集我们的鼠标+键盘操作的信息，然后分析出我们的意图，然后自动的运行了命令，我们现在是直接运行命令，省掉了前面的操作。</p><h2 id="命令初探"><a href="#命令初探" class="headerlink" title="命令初探"></a>命令初探</h2><h3 id="Linux命令格式："><a href="#Linux命令格式：" class="headerlink" title="Linux命令格式："></a>Linux命令格式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令名称  [选项]  [参数]</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><blockquote><ol><li>“命令名称”为必须项，“选项”和“参数”为可选的，“命令名称”、“选项”、“参数”这三项中间必须间隔至少一个空格。</li><li>“选项”和“参数”均可以有多个，多个可以分开写，也可以合并写在一起。</li><li>“选项”和“参数”如果同时存在，“选项”一般在“参数”前面。</li><li>“选项”前面大多数时候会以“-”开头，多个“选项”时大多数时候不分先后顺序。</li><li>有的“选项”可能要求自己的“参数”，比如：<code>mysql -u root -h 192.168.1.10</code>。</li></ol></blockquote><p>当然，Linux目前拥有上万个命令，每个命令又有可能有很多“选项”和“参数”，使用组合非常的多，因此我们没有必要把所有的命令的具体使用全部记着，只要把常用的命令以及其选项怎么使用记着就行了，至于没记住的，我们完全可以随用随查，怎么查呢？有三种方式：</p><h4 id="1-使用man命令"><a href="#1-使用man命令" class="headerlink" title="1. 使用man命令"></a>1. 使用<code>man</code>命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 你要查的命令名</span><br></pre></td></tr></table></figure><p>比如：<code>man ls</code> 查询一下<code>ls</code>命令的使用方式。</p><h4 id="2-使用命令的-h或者-help选项"><a href="#2-使用命令的-h或者-help选项" class="headerlink" title="2. 使用命令的--h或者--help选项"></a>2. 使用命令的<code>--h</code>或者<code>--help</code>选项</h4><p>对于有些命令，其自带的有帮助文档，可以使用它。</p><p>比如：<code>tar --h</code></p><p>不过有些命令并不带这些，因此适用范围较小。</p><h4 id="3-去相关网上查找或者去文档中"><a href="#3-去相关网上查找或者去文档中" class="headerlink" title="3. 去相关网上查找或者去文档中"></a>3. 去相关网上查找或者去文档中</h4><p>比如我们可以去：<a href="http://man.linuxde.net/" target="_blank" rel="noopener">http://man.linuxde.net/</a></p><h3 id="再多来一点命令"><a href="#再多来一点命令" class="headerlink" title="再多来一点命令"></a>再多来一点命令</h3><h4 id="查看目录内容命令：ls"><a href="#查看目录内容命令：ls" class="headerlink" title="查看目录内容命令：ls"></a>查看目录内容命令：<code>ls</code></h4><p>ls命令可以查看当前目录下的文件和目录，使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls   [选项]   [目录(默认当前目录)]</span><br></pre></td></tr></table></figure><p>它有很多选项，常用的有以下几个：</p><blockquote><p>-a 显示所有文件，包含隐藏文件</p><p>-l 显示文件的详细信息</p><p>-t 按照时间排序显示文件</p><p>-h 以1024为单位显示文件信息</p><p>-S 按照文件大小排序</p></blockquote><h4 id="创建文件：touch"><a href="#创建文件：touch" class="headerlink" title="创建文件：touch"></a>创建文件：<code>touch</code></h4><p>使用touch可以创建一个文件，使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch  文件名</span><br></pre></td></tr></table></figure><h4 id="查看内容命令：cat"><a href="#查看内容命令：cat" class="headerlink" title="查看内容命令：cat"></a>查看内容命令：<code>cat</code></h4><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 文件名</span><br></pre></td></tr></table></figure><p>cat命令只能查看，不能修改。</p><h4 id="带分页的查看命令：-more"><a href="#带分页的查看命令：-more" class="headerlink" title="带分页的查看命令： more"></a>带分页的查看命令： <code>more</code></h4><p>如果我们查看很长的内容页面，用cat就比较不妥，不过我们可以使用more命令。使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 文件名</span><br></pre></td></tr></table></figure><p>more命令会自动给我们进行分页，我们可以使用<code>ctrl+f</code>或者<code>空格键</code>进行“下一页”切换；使用<code>ctrl+b</code>进行“上一页”切换。</p><p>如果需要更强大的功能，可以使用<code>less</code>命令，大家可以私下查一下资料。</p><h4 id="管道命令："><a href="#管道命令：" class="headerlink" title="管道命令：|"></a>管道命令：<code>|</code></h4><h5 id="输出重定向：-gt-、-gt-gt"><a href="#输出重定向：-gt-、-gt-gt" class="headerlink" title="输出重定向：&gt; 、&gt;&gt;"></a>输出重定向：<code>&gt;</code> 、<code>&gt;&gt;</code></h5><p>要学习管道，就要涉及到linux的“输出重定向”问题，所谓输出重定向是指，任何操作，如果有输出结果，它的输出结果都有默认的输出方向，比如<code>ls</code> 、<code>more</code>等命令的默认输出位置为显示屏，不过我们在需要的时候可以手动的在内容向默认输出方向前去修改输出方向。</p><blockquote><p>> :将输出的内容写入到一个地方（覆盖）。如：ls -al > 1.txt</p><p>>>:将文件的内容写入到一个地方（追加）。如：ls -al >> 1.txt</p></blockquote><h5 id="管道："><a href="#管道：" class="headerlink" title="管道："></a>管道：</h5><p>管道命令即是利用了“输出重定向”这个特性，所谓管道就是指：将“管道符”前的命令结果输出重定向到“管道符”后面的命令，交给后面的命令进行处理。<br>比如：<code>ls -l /etc | more</code></p><h4 id="文本搜索命令：grep"><a href="#文本搜索命令：grep" class="headerlink" title="文本搜索命令：grep"></a>文本搜索命令：<code>grep</code></h4><p><code>grep</code>命令是linux下强大的文本搜索命令，可以在文本中搜索关键词。使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 搜索的内容 被搜索的文件名</span><br></pre></td></tr></table></figure><p>如： <code>grep &#39;attr&#39; install.log</code></p><p>如果需要显示在第几行，可以在命令中使用-n选项，如：<code>grep -n &#39;attr&#39; install.log</code></p><p>grep命令可以支持在多个文件中查找，如在当前目录下的所有文件中搜索：<code>grep -n &#39;attr&#39; ./*</code></p><p>当然grep也支持正则匹配等其他复杂的操作，这里就不多讲了，交给大家自己去研究吧。</p><h4 id="查找文件命令：find"><a href="#查找文件命令：find" class="headerlink" title="查找文件命令：find"></a>查找文件命令：<code>find</code></h4><p>这里我们暂且先只讲一个用法，在一个目录中根据文件名查找文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 要查找的目录 -name 要查找的文件名。</span><br></pre></td></tr></table></figure></p><p>如：<code>find / -name install.log</code> 表示：在根目录下查找文件名为install.log的文件</p><h4 id="查看-设置系统时间：date"><a href="#查看-设置系统时间：date" class="headerlink" title="查看/设置系统时间：date"></a>查看/设置系统时间：<code>date</code></h4><h5 id="查看系统时间："><a href="#查看系统时间：" class="headerlink" title="查看系统时间："></a>查看系统时间：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure><p>如果需要以指定的格式显示日期，可以使用“+”开头的字符串格式化输出，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">//带换行，带文字说明</span><br><span class="line">date &quot;+现在时刻：%n%Y-%m-%d %H:%I:%S&quot;</span><br><span class="line">//获取时间戳</span><br><span class="line">date &quot;+%s&quot;</span><br></pre></td></tr></table></figure><p>格式化时各种字符代表的意义（并不需要重点记忆，记住常用的即可）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">%n : 下一行</span><br><span class="line">%t : 跳格</span><br><span class="line">%H : 小时(00-23)</span><br><span class="line">%I : 小时(01-12)</span><br><span class="line">%k : 小时(0-23)</span><br><span class="line">%l : 小时(1-12)</span><br><span class="line">%M : 分钟(00-59)</span><br><span class="line">%p : 显示本地 AM 或 PM</span><br><span class="line">%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)</span><br><span class="line">%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数</span><br><span class="line">%S : 秒(00-60)</span><br><span class="line">%T : 直接显示时间 (24 小时制)</span><br><span class="line">%X : 相当于 %H:%M:%S</span><br><span class="line">%Z : 显示时区</span><br><span class="line">%a : 星期几 (Sun-Sat)</span><br><span class="line">%A : 星期几 (Sunday-Saturday)</span><br><span class="line">%b : 月份 (Jan-Dec)</span><br><span class="line">%B : 月份 (January-December)</span><br><span class="line">%c : 直接显示日期与时间</span><br><span class="line">%d : 日 (01-31)</span><br><span class="line">%D : 直接显示日期 (mm/dd/yy)</span><br><span class="line">%h : 同 %b</span><br><span class="line">%j : 一年中的第几天 (001-366)</span><br><span class="line">%m : 月份 (01-12)</span><br><span class="line">%U : 一年中的第几周 (00-53) (以 Sunday 为一周的第一天的情形)</span><br><span class="line">%w : 一周中的第几天 (0-6)</span><br><span class="line">%W : 一年中的第几周 (00-53) (以 Monday 为一周的第一天的情形)</span><br><span class="line">%x : 直接显示日期 (mm/dd/yy)</span><br><span class="line">%y : 年份的最后两位数字 (00.99)</span><br><span class="line">%Y : 完整年份 (0000-9999)</span><br></pre></td></tr></table></figure></p><h5 id="使用-s属性设置系统时间"><a href="#使用-s属性设置系统时间" class="headerlink" title="使用-s属性设置系统时间"></a>使用<code>-s</code>属性设置系统时间</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s &quot;2017-09-07 09:51:04&quot;</span><br></pre></td></tr></table></figure><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><code>ctrl+c</code>：停止当前命令的执行</p><p><code>ctrl+a</code>：将光标快速的切换到命令行最前端</p><p><code>ctrl+e</code>：将光标快速的切换到命令行末端</p><p><code>tab</code>：补全命令或者补全文件名/文件夹名，连按2次，会列出指定目录下指定开头字符的文件或者目录列表</p><h2 id="启动等级（0，1，2，3，5，6）"><a href="#启动等级（0，1，2，3，5，6）" class="headerlink" title="启动等级（0，1，2，3，5，6）"></a>启动等级（0，1，2，3，5，6）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">init 0:关机</span><br><span class="line">init 1：单用户形式，只root进行维护</span><br><span class="line">init 2：多用户，不能使用net file system，即无网络服务</span><br><span class="line">init 3：完全多用户，目前服务器使用最多的模式</span><br><span class="line">init 5：图形化</span><br><span class="line">init 6：重启</span><br></pre></td></tr></table></figure><p>注：init 4：目前系统未使用，空位</p><p>以上命令直接在终端中运行即可，对于启动级别的设置，也可以编辑/etc/inittab进行设置。</p><p>如果启动等级设置成6，那么机器将陷入无限重启状态。怎么解决呢？</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1.在系统重启的跑秒过程中按键：“e”</p><p><img src="http://note.youdao.com/yws/res/51///note.youdao.com/src/WEBRESOURCEfe50f5fe0fb94c9d15a04734526e9578" alt="1.png"></p><p>2.进入GRUB界面后，使用键盘的上下键，切换到第二行，再按一个“e”，（根据系统情况，可能进GRUB页面并没有如下列表，但是要看最下面的说明，根据说明进行操作）</p><p><mark>注意：这一步可能看到的并不是如下图有3行的样子，可能只有1行，这个时候只需要看方框内的文字说明，按照文字说明操作即可，步骤和下面的基本一致</mark></p><p><img src="http://note.youdao.com/yws/res/48///note.youdao.com/src/WEBRESOURCEe5cd79225a9fc8f5077e86fdce305dc0" alt="2.png"></p><p>3.进入新页面的后，在最后打个空格并输入1，表示使用 “单用户级别” 进行启动（只有启动级别为1时，系统在启动的时候不会去读/etc/inittab）。</p><p><img src="http://note.youdao.com/yws/res/55///note.youdao.com/src/WEBRESOURCE05f4e92ca5882c71f4c6ebe21ddbf6a9" alt="3.png"></p><p>4.然后回到上一级页面，按键“b”进行重启</p><p>5.重启后修改/etc/inittab里面的内容即可</p><p>注：同样的方法，我们也可以修改用户的密码，甚至是root的密码。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机&amp;编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的简介(含下载地址)</title>
      <link href="/2019/03/16/linux%E7%AE%80%E4%BB%8B%E4%B8%8B%E8%BD%BD/"/>
      <url>/2019/03/16/linux%E7%AE%80%E4%BB%8B%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux的特点"><a href="#Linux的特点" class="headerlink" title="Linux的特点"></a>Linux的特点</h3><ol><li>免费/开源</li><li>支持多用户、多线程</li><li>安全性好</li><li>对内存和文件管理优秀，最小的linux只需要几兆就能跑起来<a id="more"></a><h3 id="redhat和CentOS的关系"><a href="#redhat和CentOS的关系" class="headerlink" title="redhat和CentOS的关系"></a>redhat和CentOS的关系</h3></li></ol><p>RHEL（Red Hat Enterprise Linux），即是红帽企业版Linux，但是构建redhat的好多软件包括系统内核都是基于GPL协议的，（GPL协议的基本要求：自由软件允许用户自由拷贝、修改和销售，但是对其源代码的任何修改都必须向所有用户公开。），因此RHEL在发布的时候也要遵循这个协议，在发布的时候需要发布源代码。CentOS 就是将 RHEL 发行的源代码重新编译一次，只是 REDHAT 是商标，所以必须在新的发行版里将 REDHAT 的商标去掉。CentOS 可以得到 RHEL 的所有功能，甚至是更好的软件。但 CentOS 并不向用户提供商业支持，当然也不负上任何商业责任。</p><h3 id="Linux的下载"><a href="#Linux的下载" class="headerlink" title="Linux的下载"></a>Linux的下载</h3><p>下载软件肯定是去官网，不过这些软件好些都是国外的，下载速度比较慢，因此我们常常使用国内的开源镜像进行下载，国内的开源镜像不少，下面收集几个比较稳定的列出来：</p><blockquote><p>阿里云开源镜像：<a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></p><p>搜狐开源镜像：<a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a></p><p>网易开源镜像：<a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a></p><p>中科大开源镜像：<a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></p><p>清华大学开源镜像：<a href="https://mirror.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/</a></p><p>浙江大学开源镜像：<a href="http://mirrors.zju.edu.cn/" target="_blank" rel="noopener">http://mirrors.zju.edu.cn/</a></p><p>华中科技大学开源镜像：<a href="http://mirror.hust.edu.cn/" target="_blank" rel="noopener">http://mirror.hust.edu.cn/</a></p><p>南阳理工学院开源镜像：<a href="http://mirror.nyist.edu.cn/" target="_blank" rel="noopener">http://mirror.nyist.edu.cn/</a></p><p>中国电信天翼云开源镜像：<a href="http://mirrors.ctyun.cn/" target="_blank" rel="noopener">http://mirrors.ctyun.cn/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机&amp;编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机以及操作系统的发展史</title>
      <link href="/2019/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
      <url>/2019/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8F%91%E5%B1%95%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机的发展"><a href="#计算机的发展" class="headerlink" title="计算机的发展"></a>计算机的发展</h2><h3 id="计算机的诞生"><a href="#计算机的诞生" class="headerlink" title="计算机的诞生"></a>计算机的诞生</h3><p>1946年2月14日，在美国宾夕法尼亚大学，世界上第一台计算机ENIAC诞生，是美国军方定制，专门为了计算弹道和射击特性表面而研制的，承担开发任务的“莫尔小组”由四位科学家和工程师埃克特、莫克利、戈尔斯坦、博克斯组成。这台计算机主要元器件采用的是电子管。该机使用了1500个继电器，18800个电子管，占地170m2，重量重达30多吨，耗电150KW，造价48万美元。开机时让周围居民暂时停电。这台计算机每秒能完成5000次加法运算，400次乘法运算，比当时最快的计算工具快300倍，是继电器计算机的1000倍、手工计算的20万倍。用今天的标准看，它是那样的“笨拙”和“低级”，其功能远不如一只掌上可编程计算器，但它使科学家们从复杂的计算中解脱出来，它的诞生标志着人类进入了一个崭新的信息革命时代。<br><a id="more"></a></p><h3 id="计算机的简史"><a href="#计算机的简史" class="headerlink" title="计算机的简史"></a>计算机的简史</h3><h4 id="第一代-电子管计算机（1946-1957）"><a href="#第一代-电子管计算机（1946-1957）" class="headerlink" title="第一代 电子管计算机（1946-1957）"></a>第一代 电子管计算机（1946-1957）</h4><p>这一阶段计算机的主要特征是采用电子管元件作基本器件，用光屏管或汞延时电路作存储器，输入与输出主要采用穿孔卡片或纸带，体积大、耗电量大、速度慢、存储容量小、可靠性差、维护困难且价格昂贵。在软件上，通常使用机器语言或者汇编语言，来编写应用程序。因此这一时代的计算机主要用于科学计算。这时的计算机的基本线路是采用电子管结构，程序从人工手编的机器指令程序，过渡到符号语言，第一代电子计算机是计算工具革命性发展的开始，它所采用的二进位制与程序存贮等基本技术思想，奠定了现代电子计算机技术基础。以冯·诺依曼为代表。</p><h4 id="第二代-晶体管计算机（1957-1964）"><a href="#第二代-晶体管计算机（1957-1964）" class="headerlink" title="第二代 晶体管计算机（1957-1964）"></a>第二代 晶体管计算机（1957-1964）</h4><p>20世纪50年代中期，晶体管的出现使计算机生产技术得到了根本性的发展，由晶体管代替电子管作为计算机的基础器件，用磁芯或磁鼓作存储器，在整体性能上，比第一代计算机有了很大的提高。同时程序语言也相应的出现了，如Fortran，Cobol，Algo160等计算机高级语言。晶体管计算机被用于科学计算的同时，也开始在数据处理、过程控制方面得到应用。晶体管不仅能实现电子管的功能，又具有尺寸小、重量轻、寿命长、效率高、发热少、功耗低等优点。使用晶体管后，电子线路的结构大大改观，制造高速电子计算机就更容易实现了。</p><h4 id="第三代-中小规模集成电路计算机（1964-1971）"><a href="#第三代-中小规模集成电路计算机（1964-1971）" class="headerlink" title="第三代 中小规模集成电路计算机（1964-1971）"></a>第三代 中小规模集成电路计算机（1964-1971）</h4><p>20世纪60年代中期，随着半导体工艺的发展，成功制造了集成电路。中小规模集成电路成为计算机的主要部件，主存储器也渐渐过渡到半导体存储器，使计算机的体积更小，大大降低了计算机计算时的功耗，由于减少了焊点和接插件，进一步提高了计算机的可靠性。在软件方面，有了标准化的程序设计语言和人机会话式的Basic语言，其应用领域也进一步扩大。</p><h4 id="第四代-大规模和超大规模集成电路计算机（1971-？）"><a href="#第四代-大规模和超大规模集成电路计算机（1971-？）" class="headerlink" title="第四代 大规模和超大规模集成电路计算机（1971- ？）"></a>第四代 大规模和超大规模集成电路计算机（1971- ？）</h4><p>随着大规模集成电路的成功制作并用于计算机硬件生产过程，计算机的体积进一步缩小，性能进一步提高。集成更高的大容量半导体存储器作为内存储器，发展了并行技术和多机系统，出现了精简指令集计算机（RISC），软件系统工程化、理论化，程序设计自动化。微型计算机在社会上的应用范围进一步扩大，几乎所有领域都能看到计算机的“身影”。</p><h4 id="第五代-未来计算机"><a href="#第五代-未来计算机" class="headerlink" title="第五代 未来计算机"></a>第五代 未来计算机</h4><p>第五代计算机指具有人工智能的新一代计算机，它具有推理、联想、判断、决策、学习等功能。</p><h2 id="操作系统的发展史"><a href="#操作系统的发展史" class="headerlink" title="操作系统的发展史"></a>操作系统的发展史</h2><h3 id="操作系统产生的历史背景"><a href="#操作系统产生的历史背景" class="headerlink" title="操作系统产生的历史背景"></a>操作系统产生的历史背景</h3><p>自从第一台计算机诞生以来，它就以异乎寻常的速度发展着，但早期的硬件发展速度要远远高于软件的发展速度。这时操作系统虽已出现，但应用得还比较少，运行在计算机里的程序大多是为了实现某种特定的功能而编制的。程序员需要对计算机内部各种设备的原理具有很深的了解才能够写出所需要的程序。虽然有一些高级语言已经出现，但程序员很多仍使用机器语言或汇编语言编制程序，这时只有极少数人才能够掌握程序的开发。</p><p>直到第三代集成电路计算机（1964-1971）时代的到来，操作系统才被越来越广泛地用于计算机内部。操作系统事实上就是对计算机各种资源（设备）的一种抽象。这些资源（设备）包括CPU（Central Processor Unit）、主存（Main Memory）、辅存（Secondary Memory）、键盘（Keyboard）和显示器（Monitor）等，并在此基础上提供一系列服务（比如文件系统）。程序员可以通过调用操作系统所提供的编程接口获得服务、对各种资源方便地进行访问，从而开发出实现特定功能的应用软件，提供给最终用户（end user）。因此这一时期涌现出更多的程序员、分析员和计算机系统专家，软件行业也得到了极大的发展。而对于最终用户而言，他们对应用软件的兴趣远远高于操作系统本身，在他们看来，操作系统几乎是透明的。这时的操作系统已由早期的单用户作业操作系统发展成多用户多任务的分时操作系统。也就是说，多个用户可以通过多个终端同时访问计算机资源。尽管一台计算机物理上只有一套处理器、内存和辅存等资源，但是通过分时机制，每个用户都会拥有一套虚拟的资源，就好像每个用户都拥有一台单独的计算机。</p><h3 id="肯·汤普逊（Ken-Thompson）、丹尼斯·里奇（Dennis-M-Ritchie）和Unix的诞生"><a href="#肯·汤普逊（Ken-Thompson）、丹尼斯·里奇（Dennis-M-Ritchie）和Unix的诞生" class="headerlink" title="肯·汤普逊（Ken Thompson）、丹尼斯·里奇（Dennis M. Ritchie）和Unix的诞生"></a>肯·汤普逊（Ken Thompson）、丹尼斯·里奇（Dennis M. Ritchie）和Unix的诞生</h3><p><img src="http://note.youdao.com/yws/res/23///note.youdao.com/src/WEBRESOURCE66b6cdc8145b4b7ebc0bb2c4144f0c57" alt="1.png"><br><img src="http://note.youdao.com/yws/res/27///note.youdao.com/src/WEBRESOURCE31084116dc480e62538aab89730a30d7" alt="2.png"></p><p>1965年时，AT&amp;T（美国电话电报公司）下面的贝尔实验室（Bell Labs）加入一项由通用电气（General Electric）和麻省理工学院（MIT）合作的项目；该项目要建立一套多用户、多任务、多层次（multi-user、multi-task、multi-level）的MULTICS操作系统。汤普逊（1966年）和里奇（1967年）先后加入贝尔实验室，参与了该项目。不过，一直到1969年，MULTICS项目因工作进度太慢，自己也不知道自己什么时候能完成，贝尔实验室首先撤出了该项目，就这样项目停了下来。</p><p>MULTICS项目期间，汤普逊写的一个“star travel（星际旅行）”游戏可运行于Multics之上。项目停掉以后， 正好汤普逊发现一个闲置的PDP-7机器，汤普逊决定在PDP-7上重新写“star travel（星际旅行）”游戏， 但是PDP-7上缺少程序开发程序，为了开发方便，汤普逊决定开发PDP-7操作环境，在开发期间，汤普逊发明了一门新语言：B语言，然后用B语言开发了一个操作系统，起名叫UNiplexed Information and Computing System（UNICS）， 这个时间是1969年。</p><p>为了让大家能快点玩上游戏，1971年里奇加入了汤普逊的项目中，主要任务是改进B语言，让他更成熟，1972年，里奇在B语言的基础上设计出了一门新语言，取名C语言，1973年C语言主体完成，汤普逊和里奇用C语言重写了Unix系统（第4版）。</p><p>1974年汤普逊和里奇在计算机协会交流杂志（Communications of the ACM）正式发表了UNIX论文。同时由于AT&amp;T公司受到美国反托拉斯法的诉讼，与联邦政府签署了一份协议，这份协议不允许AT&amp;T公司生产与电话和电报服务无关的设备，也不允许从事除“公用通信服务”外的任何商业活支。这样，AT&amp;T公司就陷入了不能经营计算机产品的尴尬局面。而自从在《ACM通信》中发表了关于UNIX的论文后，越来越多的人希望能够获得UNIX软件和源码。为了不违背与政府签署的协议，AT&amp;T公司既不出售UNIX、也不为其作广告、不对其提供技术支持。而同时为了满足大家的需要，AT&amp;T公司在签署简单的“仅用于教育目的”协议的前提下，将UNIX系统无偿地提供给大学，以供教学与研究。</p><p>由于AT&amp;T公司对UNIX的策略，使得UNIX在全世界得到广泛的传播，到1975年Unix发布了第6版，这个版本在UNIX发展史上，它具有里程碑式的意义。因为这是一个真正具有现代意义的操作系统，它已经几乎具备了现代（单机）操作系统的所有概念：进程、进程间通信、多用户、虚拟内存、系统的内核模式和用户模式、文件系统、中断（自陷）管理、I/O设备管理、系统接口调用（API）、用户访问界面（shell）。当然由于这时国际互联网（Internet）还没有产生，所以该版本并不具备网络功能。该版shell已经具备了很多常用的命令：ls, mkdir, rm, cd等。</p><p>慢慢的，AT&amp;T公司开始注意到Unix所带来的商业价值。公司的律师开始寻找一些手段来保护Unix，并让其成为一种商业机密。因此，第6版成为了贝尔实验室对外发布的最后一版免费UNIX，从1979年Unix的第七版开始，Unix的许可证开始禁止大学使用Unix的源码，包括在授课中学习。</p><p>1977年，加州大学伯克利分校的Bill Joy在UNIX6的基础上进行改进和增加Pascal编译器，然后发布了“1 BSD”（1st Berkeley Software Distribution），这也意味着UNIX出现了另一个分支：BSD。到了1980年，有两个最主要的Unix的版本线，一个是Berkeley的BSD UNIX，另一个是AT&amp;T的商业版Unix。在这个时候，很显然，竞争最终引发了Unix的战争。在这场战争中，好的是，软件开发人员还是能够得到Unix的源码并对其按照自己的需要和兴致进行裁剪。而不好的是，Unix开始一发不可收拾地开发不停地出现各种各样的变种。比较有名的是IBM的AIX，SUN公司的Solaris，惠普的HP-UX</p><h3 id="理查德·马修·斯托曼（Richard-Matthew-Stallman）和自由软件运动"><a href="#理查德·马修·斯托曼（Richard-Matthew-Stallman）和自由软件运动" class="headerlink" title="理查德·马修·斯托曼（Richard Matthew Stallman）和自由软件运动"></a>理查德·马修·斯托曼（Richard Matthew Stallman）和自由软件运动</h3><p><img src="http://note.youdao.com/yws/res/16///note.youdao.com/src/WEBRESOURCE4aef90e15e543d2702cb27f07b66ad57" alt="5.jpg"></p><p>斯托曼被誉为世界第一黑客，1953年出生于美国纽约曼哈顿地区，1971年进入哈佛大学学习，同年受聘于麻省理工学院人工智能实验室（AI Laboratory），成为一名职业黑客。在AI实验室工作期间，斯托曼开发了多种今后影响深远的软件，其中最著名的就是Emacs。斯托曼在AI是一名典型的黑客，是整个黑客文化的一份子。然而进入八十年代后，黑客社群在软件工业商业化的强大压力下日渐土崩瓦解，甚至连AI实验室的许多黑客也组成了Symbolic公司，试图以专利软件来取代实验室中黑客文化的产物－－免费可自由流通的软件。斯托曼对此感到气愤与无奈。在对Symbolic进行了一段时间的抗争后，他于1985年发表了著名的GNU宣言(GNU Manifesto)，正式宣布要开始进行一项宏伟的计划：创造一套完全自由免费，兼容于Unix的操作系统GNU（GNU’s Not Unix!）。之后他又建立了自由软件基金会来协助该计划。他于1989年与一群律师起草了广为使用的GNU通用公共协议证书（GNU General Public License, GNU GPL）。所有GPL协议下的自由软件都遵循着”Copyleft”(非版权)原则：即自由软件允许用户自由拷贝、修改和销售，但是对其源代码的任何修改都必须向所有用户公开。</p><p><img src="http://note.youdao.com/yws/res/14///note.youdao.com/src/WEBRESOURCEf6160177444dcdfd5e3487b3ac862c93" alt="4.jpeg"></p><h3 id="Minix操作系统"><a href="#Minix操作系统" class="headerlink" title="Minix操作系统"></a>Minix操作系统</h3><p><img src="http://note.youdao.com/yws/res/22///note.youdao.com/src/WEBRESOURCEfb859706bce5640b26f68cf4b3bc3e31" alt="3.png"></p><p>UNIX私有化后，在大学中不再能使用UNIX源代码。荷兰阿姆斯特丹的Vrije大学计算机科学系的Andrew S. Tanenbaum教授为了能在课堂上教授学生操作系统运作的实务细节，决定在不使用任何AT&amp;T公司的Unix源代码前提下，自行开发与UNIX兼容的操作系统，以避免版权上的争议。Minix的程序代共约12000行，教授以小型UNIX（mini-UNIX）之意，将它命名为MINIX，并且还写了一本描述Minix设计原理的书。</p><h3 id="Linux的产生"><a href="#Linux的产生" class="headerlink" title="Linux的产生"></a>Linux的产生</h3><p><img src="http://note.youdao.com/yws/res/19///note.youdao.com/src/WEBRESOURCEea9e1563cd085cedcc729655072a1db2" alt="6.png"></p><p>到1991年，此时操作系统一般还都运行在大型计算机上，大部分系统在微机上还没法使用（minix可以）。林纳斯·托瓦兹（Linus Torvalds）还是芬兰赫尔辛基大学的学生，他用压岁钱和贷款搞到一台386微机，然后从美国邮购了一套minix，在minix邮寄的过程中，林纳斯·托瓦兹研究了一下Intel 80386 CPU 的硬件知识。此时GUN计划的好多软件已经发布，尤其是万众期待的C编译器也已经发布，但是GUN操作系统还没有做出来（此时GUN计划的操作系统HURD刚开始开发不久，短期内还没有完成的迹象），此时Minix也是有版权的，需要购买才能获得源码，后来在托瓦兹的学习使用中，他发现minix毕竟是用来搞教学的，功能不咋强大，因此他决定自己写个操作系统。</p><p>1991年3月29日，Linus第1次向comp.os.minix 投递消息。所发帖子的题目是“gcc on minix-386doesn’t optimize”,是有关gcc 编译器在MINIX-386 系统上运行优化的问题。</p><p>从1991年4月 份开始，Linus几乎花费了全部时间研究MINIX-386系统(Hacking the kernel)，并且尝试着移植GNU 的软件到该系统上(GNU gcc、bash、gdb 等)。并于4 月13 日在comp.os.minix 上发布说自己已经成功地将bash 移植到了MINIX 上，而且已经爱不释手、不能离开这个shell 软件了。</p><p>1991年7月3日Linus在comp.os.minix上透露他在进行操作系统的开发，并且已经想到要实现与POSIX兼容的问题了</p><p>1991年8月25日Linus在comp.os.minix上首次透露出正在开发一个(免费的)386(486)操作系统，并且说只是兴趣而已，代码不会很大，也不会象GNU 的那样专业。希望大家反馈一些对于MINIX系统中喜欢哪些特色、不喜欢什么等信息，并且说明由于实际和其它一些原因，新开发的系统刚开始MINIX很象（并且使用了MINIX的文件系统）。并且已经成功地将bash(1.08版)和gcc(1.40 版)移植到了新系统上，而且在过几个月就可以实用了。最后，Linus申明他开发的操作系统没有使用一行MINIX 的源代码；而且由于使用了386的任务切换特性，所以该操作系统不好移植（没有可移植性），并且只能使用AT硬盘。对于移植性问题，Linus当时并没有考虑。</p><p>1991年的10月5日 ，Linus在comp.os.minix 新闻组上发布消息，正式向外宣布了自己的内核系统诞生（Free minix-like kernel sources for 386-AT）。这段消息可以视为Linux 的诞生宣言，并且一直广为流传。因此10月5 日对Linux社区来说是一个特殊的日子，许多后来Linux 的新版本发布时都选择了这个日子。比如RedHat 公司选择这个日子发布它的新系统。</p><p>该系统发布后，来自世界各地的计算机爱好者都为该项目贡献了代码，到1993年，大约有100余名程序员参与了内核代码编写/修改工作，其中核心组由5人组成，此时Linux 0.99的代码大约有十万行，用户大约有10万左右。</p><p>1994年3月，Linux1.0发布，代码量17万行，当时是按照完全自由免费的协议发布，随后正式采用GPL协议。</p><h3 id="Linux的发行版"><a href="#Linux的发行版" class="headerlink" title="Linux的发行版"></a>Linux的发行版</h3><p>1995年1月，Bob Young创办了RedHat（小红帽），以GNU/Linux为核心，集成了400多个源代码开放的程序模块，搞出了一种冠以品牌的Linux，即RedHat Linux，称为Linux”发行版”，在市场上出售。这在经营模式上是一种创举。随后Linux的发行版逐渐增多。比较有代表性的有redhat、suse、Debian。</p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><h4 id="Unix和Linux发展版本历程（家谱）："><a href="#Unix和Linux发展版本历程（家谱）：" class="headerlink" title="Unix和Linux发展版本历程（家谱）："></a>Unix和Linux发展版本历程（家谱）：</h4><p><img src="http://note.youdao.com/yws/res/28///note.youdao.com/src/WEBRESOURCE01123333955dd7673832630aca22666c" alt="unix家谱.jpg"></p><p><img src="http://note.youdao.com/yws/res/25///note.youdao.com/src/WEBRESOURCEad66511a3981fe545801431c41468a16" alt="unix家谱2.gif"></p><h4 id="Linux发行版家谱"><a href="#Linux发行版家谱" class="headerlink" title="Linux发行版家谱"></a>Linux发行版家谱</h4><p><img src="https://note.youdao.com/src/WEBRESOURCE364ffb8b78580c3507050250542047b9" alt="linux发行版.gif"></p><p><img src="https://note.youdao.com/src///note.youdao.com/src/WEBRESOURCE24ea168cb01e7abad25e8f9a81f82f11" alt="linux发行版2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机&amp;编程 </tag>
            
            <tag> 计算机基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用GitHub+hexo创建个博客</title>
      <link href="/2019/03/14/blog/"/>
      <url>/2019/03/14/blog/</url>
      
        <content type="html"><![CDATA[<h2 id="O-踩了N多坑总结出以下经验"><a href="#O-踩了N多坑总结出以下经验" class="headerlink" title="O 踩了N多坑总结出以下经验"></a>O 踩了N多坑总结出以下经验</h2><p><strong>一步一步绝对能成 mac+windows</strong><br><a id="more"></a></p><h2 id="一-常见有三种博客搭建方案"><a href="#一-常见有三种博客搭建方案" class="headerlink" title="一 常见有三种博客搭建方案"></a>一 常见有三种博客搭建方案</h2><ul><li><a href="https://zh-cn.wordpress.com/" target="_blank" rel="noopener">workpress</a></li></ul><blockquote><p>一般需要独立域名(充钱)有广告，做许多东西需要升级至高级版(还是充钱)，手机版访问麻烦(所以我直接扔了那个博客)</p></blockquote><ul><li><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> + <a href="https://jekyllrb.com/" target="_blank" rel="noopener">jekyll</a></li></ul><blockquote><p>稍微麻烦一点 (其实是作者技术太挫)</p></blockquote><ul><li><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> + <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li></ul><p><img src="https://user-images.githubusercontent.com/48438858/54468954-e73dd380-47cc-11e9-8089-a1f910273b15.png" alt="C位当然要有配图"></p><blockquote><p>免费 简单 据说用的人还多 所以我选择这个</p></blockquote><h2 id="二-下面直接进入主题-👇-博客搭建"><a href="#二-下面直接进入主题-👇-博客搭建" class="headerlink" title="二 下面直接进入主题 👇 博客搭建"></a>二 下面直接进入主题 👇 博客搭建</h2><h4 id="首先我们需要一个GitHub账号和一个项目库"><a href="#首先我们需要一个GitHub账号和一个项目库" class="headerlink" title="首先我们需要一个GitHub账号和一个项目库"></a>首先我们需要一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>账号和一个项目库</h4><p>怎么创建账号就不用我说了，但是创建库的时候需要提到一个细节</p><p>1 先点击这里创建</p><p><img src="https://user-images.githubusercontent.com/48438858/54468995-6cc18380-47cd-11e9-8290-c0727beb3fa5.png" alt="点击创建项目"></p><p>2 创建项目的是时候Repositoryname需要同Owner一样然后补齐github.io</p><p><img src="https://user-images.githubusercontent.com/48438858/54469009-adb99800-47cd-11e9-8a87-7e05fd3b80e6.png" alt="设置仓库名"></p><p>3 然后点击 Create repository创建就好</p><h2 id="三-环境配置"><a href="#三-环境配置" class="headerlink" title="三 环境配置"></a>三 环境配置</h2><p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo</a>有着详细的安装使用介绍 下面是我的</p><h3 id="先怼node-js"><a href="#先怼node-js" class="headerlink" title="先怼node,js"></a>先怼node,js</h3><p>mac: 去<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>官网，我下载了左边的那个 然后一路安装即可</p><p>windows: <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>下载windows就可以<br>下载安装包，安装Node.js会包含环境变量及npm的安装，安装之后可以在命令行中输入node -v看看是否安装成功。</p><p>如果 git bash 里报错了，就去环境变量里看看有没有 nodejs，没有的话需要把nodejs地址添加一下如果已经有了，重启电脑。</p><h3 id="再怼git"><a href="#再怼git" class="headerlink" title="再怼git"></a>再怼git</h3><p>mac: <a href="https://www.git-scm.com/download/mac" target="_blank" rel="noopener">点击这里进入页面自动下载了</a></p><p>windows: <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">点击这里进入页面直接下载了</a>记得git -v 查看是否安装成功失败了请参看其他详细git安装教程(我反正没失败过)</p><h3 id="然后就可以安装Hexo了"><a href="#然后就可以安装Hexo了" class="headerlink" title="然后就可以安装Hexo了"></a>然后就可以安装Hexo了</h3><h4 id="mac"><a href="#mac" class="headerlink" title="mac:"></a>mac:</h4><p>  Node.js和Git都安装好后就可以安装Hexo了。</p><p>  终端执行怼下命令： sudo npm install -g hexo</p><p>  <em>如果需要输入密码就是Mac登录密码</em></p><p>  这里就是一个大坑：Hexo官网上的安装命令是 npm install -g hexo-cli，多数教程也都是没有sudo然鹅直接怼就去就会报错权限，加sudo解决问题。</p><h4 id="windows"><a href="#windows" class="headerlink" title="windows:"></a>windows:</h4><p>npm install -g hexo-cli</p><h3 id="将你的git与GitHub绑定"><a href="#将你的git与GitHub绑定" class="headerlink" title="将你的git与GitHub绑定"></a>将你的git与GitHub绑定</h3><h4 id="由于Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址"><a href="#由于Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址" class="headerlink" title="由于Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址"></a>由于Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址</h4><p>git config –global user.name “你的GitHub用户名”</p><p>git config –global user.email “你的GitHub注册邮箱”</p><h4 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h4><p>生成密钥 输入： ssh-keygen -t rsa -C “你的GitHub注册邮箱”<br>然后回车遇到y or n? 就y 继续回车</p><p>mac: 先输入 cd ~</p><p>然后就可以cd~/.ssh 里面会有id_rsa和rsa_rsa.pub两个文件</p><p>vim rsa_rsa.pub复制里面的内容 没有vim的话vi应该有用vi rsa_rsa.pub</p><p>windows:</p><p>输入ls -a 查看所有文件 在输入cat.ssh\id_rsa.pub打开文件</p><p>复制里面全部内容</p><p>然后打开git设置(点击头像 seeings)</p><p><img src="https://user-images.githubusercontent.com/48438858/54468999-7cd96300-47cd-11e9-912c-6876d0a52614.png" alt="配置新的ssh"></p><p>然后粘贴你的密钥 Add SSH key保存</p><p><img src="https://user-images.githubusercontent.com/48438858/54469020-c924a300-47cd-11e9-9bf0-aa23bca3afa0.png" alt="加入密钥保存"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h4 id="mac-1"><a href="#mac-1" class="headerlink" title="mac"></a>mac</h4><p>我们先找个地方创建一个文件夹这里会存放你的blog(博客)全部内容</p><p>打开终端进入这个文件夹目录 blog是你的文件夹名称</p><p>输入hexo init blog</p><p>然后cd到blog文件夹下安装npm</p><p>输入 npm install</p><p>执行下面的命令开启hexo服务器</p><p>输入 hexo s</p><p>这个时候你可以看见一个这样的博客页面了打开浏览器</p><p>输入 localhost:4000</p><h4 id="接下来就是部署了"><a href="#接下来就是部署了" class="headerlink" title="接下来就是部署了"></a>接下来就是部署了</h4><p>首先介绍一下两个配置文件他们都叫_config.yml</p><p>不同的是blog里面的_config.yml是站点配置文件</p><p>而我们themes文件夹每个主题文件里也有一个_config.yml他是配置主题的文件</p><p>我们打开blog里面的_config.yml 输入vim _config.yml</p><p>翻到最下面改成这样没有就加上</p><p><img src="https://user-images.githubusercontent.com/48438858/54469024-d477ce80-47cd-11e9-91af-e0396018de5f.png" alt="这样"></p><p>你的地址在这里</p><p><img src="https://user-images.githubusercontent.com/48438858/54469027-e22d5400-47cd-11e9-8287-602cc4544dc8.png" alt="在这里"></p><p>这里需要注意坑二 每一个配置的 ： 后面要有一个空格！！！！<br>然后保存站点配置</p><p>在blog文件夹目录里面执行一下生成静态页面命令</p><p>输入 hexo g  (或是hexo generate)</p><p>如果有报一下错误</p><blockquote><p>ERROR Local hexo not found in ~/blog</p></blockquote><blockquote><p>ERROR Try runing: ‘npm install hexo –save’</p></blockquote><p>就执行 输入 npm install hexo –save<br>没有报错请不要执行或者忽略</p><p>执行配置命令</p><p>hexo d  (或是 hexo deploy)</p><p>这里特别注意 我就是载在这里！ 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装一个叫hexo-deployer-git东西</p><p>输入 npm install hexo-deployer-git –save</p><p>执行 hexo g<br>执行 hexo d</p><p>倘若提示输入密码输入即可没有执行忽略</p><p>这时候就可以访问你的博客了   https://写你的.github.io/</p><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>终端cd到blog文件夹目录 </p><p>输入hexo new “文件名” 新建文章</p><h4 id="发布部署"><a href="#发布部署" class="headerlink" title="发布部署"></a>发布部署</h4><p>然后 hexo g (生成静态页面)<br>在然后 hexo d (部署到github)</p><p>如果出现了花里胡哨的错误可以在生成之前</p><p>输入 hexo clean</p><p>ps: 每次更新都会等那么一会</p><h2 id="写下更换主题吧"><a href="#写下更换主题吧" class="headerlink" title="写下更换主题吧"></a>写下更换主题吧</h2><p>在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo主题</a>里找到一款主题我的是yilia</p><p>下载这个主题</p><p>输入 git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</p><p><img src="https://user-images.githubusercontent.com/48438858/54469036-f1ac9d00-47cd-11e9-8484-ecb7ef4a6f84.png" alt="这里会多一个"></p><blockquote><p><code></code><br>打开站点的_config.yml配置文件，将里面的 theme: landscape 改为 theme: yilia.</p></blockquote><p><img src="https://user-images.githubusercontent.com/48438858/54469042-fbce9b80-47cd-11e9-95d9-cc2677a64899.png" alt="改成你主题的名字"></p><p>然后还是 hexo g 和 hexo d</p><p>最后访问下你的博客吧这里在看看扔出我的</p><p><a href="https://zpangjie.github.io/" target="_blank" rel="noopener">张胖杰的博客</a></p><p>ps: 每次更新都会等那么一会!!!!!!!!</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机&amp;编程 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
