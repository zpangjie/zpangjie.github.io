{"meta":{"title":"王小质的博客","subtitle":"萌妹于我如浮云","description":"编程 摄影","author":"欢迎来到王小质的博客","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"sequeI pro解决连接数据库10秒延迟","date":"2019-03-18T00:32:25.000Z","updated":"2019-03-18T00:32:27.000Z","comments":true,"path":"2019/03/18/sequeI pro解决连接数据库10秒延迟/","link":"","permalink":"http://yoursite.com/2019/03/18/sequeI pro解决连接数据库10秒延迟/","excerpt":"","text":"无视验证 禁用DNS解析输入 vim /etc/my.cnf 在里面加入 skip-name-resolve 保存(wq)","categories":[],"tags":[]},{"title":"Vi和Vim的简单使用","slug":"Vi和Vim的简单使用","date":"2019-03-16T00:58:23.000Z","updated":"2019-03-16T02:12:52.000Z","comments":true,"path":"2019/03/16/Vi和Vim的简单使用/","link":"","permalink":"http://yoursite.com/2019/03/16/Vi和Vim的简单使用/","excerpt":"vi是是类unix系统下最受欢迎的两个编辑器之一，另一个是Emacs。vi的作者是Bill Joy，Vim可以看成是vi的升级版，他完全兼容vi，它的作者是Bram Moolenaar。vi/vim的学习曲线比较陡峭，不过一旦熟练掌握后，可以大大提高编辑效率。","text":"vi是是类unix系统下最受欢迎的两个编辑器之一，另一个是Emacs。vi的作者是Bill Joy，Vim可以看成是vi的升级版，他完全兼容vi，它的作者是Bram Moolenaar。vi/vim的学习曲线比较陡峭，不过一旦熟练掌握后，可以大大提高编辑效率。下面我们简单学习一下Vim的使用： vi/vim的模式1. 命令模式(浏览模式) 控制屏幕光标的移动，删除字符、字或行等。 2. 插入模式 只有在Insert mode下，才可以做文字输入，按[ESC]键可回到命令行模式 3. 底行模式 可以保存文件、退出vi、设置vi、查找等功能 部分功能使用说明一、打开文件、保存、关闭文件(“命令模式”下使用)1234567vi filename //打开filename文件 :w //保存文件 :w 1.txt //保存至1.txt文件 :q //退出编辑器 :q! //退出编辑器，且不保存 :wq //退出编辑器，且保存文件:x //保存内容并退出 二、插入文本或行(在“命令模式”下使用，执行下面命令后将进入“插入模式”，按ESC键可退出“插入模式”)12345678a //在当前光标位置的右边添加文本 i //在当前光标位置的左边添加文本 A //在当前行的末尾位置添加文本 I //在当前行的开始处添加文本(非空字符的行首) O //在当前行的上面新建一行 o //在当前行的下面新建一行 R //替换(覆盖)当前光标位置及后面的若干文本 J //合并光标所在行及下一行为一行(依然在命令模式) 三、移动光标(“命令模式”下使用) 1、使用上下左右方向键 2、命令模式下：1234567891011 h //向左 j //向下 k //向上 l //向右 空格键 //向右 Backspace //向左 Enter //移动到下一行首 - //移动到上一行首``` 四、删除、恢复字符或行(“命令模式”下使用) x //删除当前字符 nx //删除从光标开始的n个字符 dd //删除当前行 ndd //向下删除当前行在内的n行 u //撤销上一步操作 ctrl+R //反撤销，和u的功能相反 U //撤销对当前行的所有操作 12五、搜索(“底行模式”下使用) /str //向光标下搜索str字符串 ?str //向光标上搜索str字符串 n //向下搜索前一个搜素动作 N //向上搜索前一个搜索动作 12六、跳至指定行(“命令模式”下使用) n+ //向下跳n行 n- //向上跳n行 nG //跳到行号为n的行 G //跳至文件的底部 12七、设置行号(“底行模式”下使用) :set nu //显示行号 :set nonu //取消显示行号 12八、复制、粘贴(“命令模式”下使用) yy //将当前行复制到粘贴板缓冲区，也可以用 &quot;ayy 复制，&quot;a 为粘贴板缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。 nyy //将当前行向下n行复制到粘贴板缓冲区，也可以用 &quot;anyy 复制，&quot;a 为粘贴板缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。 yw //复制从光标开始到词尾的字符。 nyw //复制从光标开始的n个单词。 y^ //复制从光标到行首的内容。 y$ //复制从光标到行尾的内容。 p //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用&quot;ap 进行粘贴。 P //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用&quot;aP 进行粘贴。 12九、替换(“命令模式”下使用) :s/old/new //用new替换行中首次出现的old :s/old/new/g //用new替换行中所有的old :n,m s/old/new/g //用new替换从n到m行里所有的old :%s/old/new/g //用new替换当前文件里所有的old 12十、编辑其他文件 :e otherfilename //新建一个文件名为otherfilename的文件。 `","categories":[],"tags":[{"name":"计算机&编程","slug":"计算机-编程","permalink":"http://yoursite.com/tags/计算机-编程/"}]},{"title":"Linux基本命令","slug":"Linux命令","date":"2019-03-16T00:57:53.000Z","updated":"2019-03-16T02:23:05.000Z","comments":true,"path":"2019/03/16/Linux命令/","link":"","permalink":"http://yoursite.com/2019/03/16/Linux命令/","excerpt":"超级管理员CentOS/RedHat系统的超级管理员账号为：root 开胃小菜不懂Linux控制台命令，相当于不懂Linux，因此我们要好好学习。先看几个开胃小菜，打开控制台。","text":"超级管理员CentOS/RedHat系统的超级管理员账号为：root 开胃小菜不懂Linux控制台命令，相当于不懂Linux，因此我们要好好学习。先看几个开胃小菜，打开控制台。 关机123456//方法1shutdown -h now//方法2poweroff//方法3halt 重启1234//方法1reboot//方法2shutdown -r now 注销登录1logout 整完了几个开胃小菜，我们发现，命令用起来很爽，只用在键盘上敲几下就能完成以前我们使用各种鼠标+键盘一起配合才能完成的操作。其实我们可以这样理解：原来的图形界面化的操作其实是操作系统通过收集我们的鼠标+键盘操作的信息，然后分析出我们的意图，然后自动的运行了命令，我们现在是直接运行命令，省掉了前面的操作。 命令初探Linux命令格式：1命令名称 [选项] [参数] 说明： “命令名称”为必须项，“选项”和“参数”为可选的，“命令名称”、“选项”、“参数”这三项中间必须间隔至少一个空格。 “选项”和“参数”均可以有多个，多个可以分开写，也可以合并写在一起。 “选项”和“参数”如果同时存在，“选项”一般在“参数”前面。 “选项”前面大多数时候会以“-”开头，多个“选项”时大多数时候不分先后顺序。 有的“选项”可能要求自己的“参数”，比如：mysql -u root -h 192.168.1.10。 当然，Linux目前拥有上万个命令，每个命令又有可能有很多“选项”和“参数”，使用组合非常的多，因此我们没有必要把所有的命令的具体使用全部记着，只要把常用的命令以及其选项怎么使用记着就行了，至于没记住的，我们完全可以随用随查，怎么查呢？有三种方式： 1. 使用man命令1man 你要查的命令名 比如：man ls 查询一下ls命令的使用方式。 2. 使用命令的--h或者--help选项对于有些命令，其自带的有帮助文档，可以使用它。 比如：tar --h 不过有些命令并不带这些，因此适用范围较小。 3. 去相关网上查找或者去文档中比如我们可以去：http://man.linuxde.net/ 再多来一点命令查看目录内容命令：lsls命令可以查看当前目录下的文件和目录，使用方法： 1ls [选项] [目录(默认当前目录)] 它有很多选项，常用的有以下几个： -a 显示所有文件，包含隐藏文件 -l 显示文件的详细信息 -t 按照时间排序显示文件 -h 以1024为单位显示文件信息 -S 按照文件大小排序 创建文件：touch使用touch可以创建一个文件，使用方法： 1touch 文件名 查看内容命令：cat使用方法： 1cat 文件名 cat命令只能查看，不能修改。 带分页的查看命令： more如果我们查看很长的内容页面，用cat就比较不妥，不过我们可以使用more命令。使用方法： 1more 文件名 more命令会自动给我们进行分页，我们可以使用ctrl+f或者空格键进行“下一页”切换；使用ctrl+b进行“上一页”切换。 如果需要更强大的功能，可以使用less命令，大家可以私下查一下资料。 管道命令：|输出重定向：&gt; 、&gt;&gt;要学习管道，就要涉及到linux的“输出重定向”问题，所谓输出重定向是指，任何操作，如果有输出结果，它的输出结果都有默认的输出方向，比如ls 、more等命令的默认输出位置为显示屏，不过我们在需要的时候可以手动的在内容向默认输出方向前去修改输出方向。 > :将输出的内容写入到一个地方（覆盖）。如：ls -al > 1.txt >>:将文件的内容写入到一个地方（追加）。如：ls -al >> 1.txt 管道：管道命令即是利用了“输出重定向”这个特性，所谓管道就是指：将“管道符”前的命令结果输出重定向到“管道符”后面的命令，交给后面的命令进行处理。比如：ls -l /etc | more 文本搜索命令：grepgrep命令是linux下强大的文本搜索命令，可以在文本中搜索关键词。使用方法： 1grep 搜索的内容 被搜索的文件名 如： grep &#39;attr&#39; install.log 如果需要显示在第几行，可以在命令中使用-n选项，如：grep -n &#39;attr&#39; install.log grep命令可以支持在多个文件中查找，如在当前目录下的所有文件中搜索：grep -n &#39;attr&#39; ./* 当然grep也支持正则匹配等其他复杂的操作，这里就不多讲了，交给大家自己去研究吧。 查找文件命令：find这里我们暂且先只讲一个用法，在一个目录中根据文件名查找文件：1find 要查找的目录 -name 要查找的文件名。 如：find / -name install.log 表示：在根目录下查找文件名为install.log的文件 查看/设置系统时间：date查看系统时间：1date 如果需要以指定的格式显示日期，可以使用“+”开头的字符串格式化输出，比如： 12345date &quot;+%Y-%m-%d %H:%M:%S&quot;//带换行，带文字说明date &quot;+现在时刻：%n%Y-%m-%d %H:%I:%S&quot;//获取时间戳date &quot;+%s&quot; 格式化时各种字符代表的意义（并不需要重点记忆，记住常用的即可）：123456789101112131415161718192021222324252627282930%n : 下一行%t : 跳格%H : 小时(00-23)%I : 小时(01-12)%k : 小时(0-23)%l : 小时(1-12)%M : 分钟(00-59)%p : 显示本地 AM 或 PM%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数%S : 秒(00-60)%T : 直接显示时间 (24 小时制)%X : 相当于 %H:%M:%S%Z : 显示时区%a : 星期几 (Sun-Sat)%A : 星期几 (Sunday-Saturday)%b : 月份 (Jan-Dec)%B : 月份 (January-December)%c : 直接显示日期与时间%d : 日 (01-31)%D : 直接显示日期 (mm/dd/yy)%h : 同 %b%j : 一年中的第几天 (001-366)%m : 月份 (01-12)%U : 一年中的第几周 (00-53) (以 Sunday 为一周的第一天的情形)%w : 一周中的第几天 (0-6)%W : 一年中的第几周 (00-53) (以 Monday 为一周的第一天的情形)%x : 直接显示日期 (mm/dd/yy)%y : 年份的最后两位数字 (00.99)%Y : 完整年份 (0000-9999) 使用-s属性设置系统时间1date -s &quot;2017-09-07 09:51:04&quot; 快捷键ctrl+c：停止当前命令的执行 ctrl+a：将光标快速的切换到命令行最前端 ctrl+e：将光标快速的切换到命令行末端 tab：补全命令或者补全文件名/文件夹名，连按2次，会列出指定目录下指定开头字符的文件或者目录列表 启动等级（0，1，2，3，5，6）123456init 0:关机init 1：单用户形式，只root进行维护init 2：多用户，不能使用net file system，即无网络服务init 3：完全多用户，目前服务器使用最多的模式init 5：图形化init 6：重启 注：init 4：目前系统未使用，空位 以上命令直接在终端中运行即可，对于启动级别的设置，也可以编辑/etc/inittab进行设置。 如果启动等级设置成6，那么机器将陷入无限重启状态。怎么解决呢？ 解决方法1.在系统重启的跑秒过程中按键：“e” 2.进入GRUB界面后，使用键盘的上下键，切换到第二行，再按一个“e”，（根据系统情况，可能进GRUB页面并没有如下列表，但是要看最下面的说明，根据说明进行操作） 注意：这一步可能看到的并不是如下图有3行的样子，可能只有1行，这个时候只需要看方框内的文字说明，按照文字说明操作即可，步骤和下面的基本一致 3.进入新页面的后，在最后打个空格并输入1，表示使用 “单用户级别” 进行启动（只有启动级别为1时，系统在启动的时候不会去读/etc/inittab）。 4.然后回到上一级页面，按键“b”进行重启 5.重启后修改/etc/inittab里面的内容即可 注：同样的方法，我们也可以修改用户的密码，甚至是root的密码。","categories":[],"tags":[{"name":"计算机&编程","slug":"计算机-编程","permalink":"http://yoursite.com/tags/计算机-编程/"}]},{"title":"Linux的简介(含下载地址)","slug":"linux简介下载","date":"2019-03-16T00:57:17.000Z","updated":"2019-03-16T02:22:21.000Z","comments":true,"path":"2019/03/16/linux简介下载/","link":"","permalink":"http://yoursite.com/2019/03/16/linux简介下载/","excerpt":"Linux的特点 免费/开源 支持多用户、多线程 安全性好 对内存和文件管理优秀，最小的linux只需要几兆就能跑起来","text":"Linux的特点 免费/开源 支持多用户、多线程 安全性好 对内存和文件管理优秀，最小的linux只需要几兆就能跑起来 redhat和CentOS的关系 RHEL（Red Hat Enterprise Linux），即是红帽企业版Linux，但是构建redhat的好多软件包括系统内核都是基于GPL协议的，（GPL协议的基本要求：自由软件允许用户自由拷贝、修改和销售，但是对其源代码的任何修改都必须向所有用户公开。），因此RHEL在发布的时候也要遵循这个协议，在发布的时候需要发布源代码。CentOS 就是将 RHEL 发行的源代码重新编译一次，只是 REDHAT 是商标，所以必须在新的发行版里将 REDHAT 的商标去掉。CentOS 可以得到 RHEL 的所有功能，甚至是更好的软件。但 CentOS 并不向用户提供商业支持，当然也不负上任何商业责任。 Linux的下载下载软件肯定是去官网，不过这些软件好些都是国外的，下载速度比较慢，因此我们常常使用国内的开源镜像进行下载，国内的开源镜像不少，下面收集几个比较稳定的列出来： 阿里云开源镜像：http://mirrors.aliyun.com/ 搜狐开源镜像：http://mirrors.sohu.com/ 网易开源镜像：http://mirrors.163.com/ 中科大开源镜像：http://mirrors.aliyun.com/ 清华大学开源镜像：https://mirror.tuna.tsinghua.edu.cn/ 浙江大学开源镜像：http://mirrors.zju.edu.cn/ 华中科技大学开源镜像：http://mirror.hust.edu.cn/ 南阳理工学院开源镜像：http://mirror.nyist.edu.cn/ 中国电信天翼云开源镜像：http://mirrors.ctyun.cn/","categories":[],"tags":[{"name":"计算机&编程","slug":"计算机-编程","permalink":"http://yoursite.com/tags/计算机-编程/"}]},{"title":"计算机以及操作系统的发展史","slug":"计算机发展史","date":"2019-03-16T00:50:44.000Z","updated":"2019-03-16T02:18:58.000Z","comments":true,"path":"2019/03/16/计算机发展史/","link":"","permalink":"http://yoursite.com/2019/03/16/计算机发展史/","excerpt":"计算机的发展计算机的诞生1946年2月14日，在美国宾夕法尼亚大学，世界上第一台计算机ENIAC诞生，是美国军方定制，专门为了计算弹道和射击特性表面而研制的，承担开发任务的“莫尔小组”由四位科学家和工程师埃克特、莫克利、戈尔斯坦、博克斯组成。这台计算机主要元器件采用的是电子管。该机使用了1500个继电器，18800个电子管，占地170m2，重量重达30多吨，耗电150KW，造价48万美元。开机时让周围居民暂时停电。这台计算机每秒能完成5000次加法运算，400次乘法运算，比当时最快的计算工具快300倍，是继电器计算机的1000倍、手工计算的20万倍。用今天的标准看，它是那样的“笨拙”和“低级”，其功能远不如一只掌上可编程计算器，但它使科学家们从复杂的计算中解脱出来，它的诞生标志着人类进入了一个崭新的信息革命时代。","text":"计算机的发展计算机的诞生1946年2月14日，在美国宾夕法尼亚大学，世界上第一台计算机ENIAC诞生，是美国军方定制，专门为了计算弹道和射击特性表面而研制的，承担开发任务的“莫尔小组”由四位科学家和工程师埃克特、莫克利、戈尔斯坦、博克斯组成。这台计算机主要元器件采用的是电子管。该机使用了1500个继电器，18800个电子管，占地170m2，重量重达30多吨，耗电150KW，造价48万美元。开机时让周围居民暂时停电。这台计算机每秒能完成5000次加法运算，400次乘法运算，比当时最快的计算工具快300倍，是继电器计算机的1000倍、手工计算的20万倍。用今天的标准看，它是那样的“笨拙”和“低级”，其功能远不如一只掌上可编程计算器，但它使科学家们从复杂的计算中解脱出来，它的诞生标志着人类进入了一个崭新的信息革命时代。 计算机的简史第一代 电子管计算机（1946-1957）这一阶段计算机的主要特征是采用电子管元件作基本器件，用光屏管或汞延时电路作存储器，输入与输出主要采用穿孔卡片或纸带，体积大、耗电量大、速度慢、存储容量小、可靠性差、维护困难且价格昂贵。在软件上，通常使用机器语言或者汇编语言，来编写应用程序。因此这一时代的计算机主要用于科学计算。这时的计算机的基本线路是采用电子管结构，程序从人工手编的机器指令程序，过渡到符号语言，第一代电子计算机是计算工具革命性发展的开始，它所采用的二进位制与程序存贮等基本技术思想，奠定了现代电子计算机技术基础。以冯·诺依曼为代表。 第二代 晶体管计算机（1957-1964）20世纪50年代中期，晶体管的出现使计算机生产技术得到了根本性的发展，由晶体管代替电子管作为计算机的基础器件，用磁芯或磁鼓作存储器，在整体性能上，比第一代计算机有了很大的提高。同时程序语言也相应的出现了，如Fortran，Cobol，Algo160等计算机高级语言。晶体管计算机被用于科学计算的同时，也开始在数据处理、过程控制方面得到应用。晶体管不仅能实现电子管的功能，又具有尺寸小、重量轻、寿命长、效率高、发热少、功耗低等优点。使用晶体管后，电子线路的结构大大改观，制造高速电子计算机就更容易实现了。 第三代 中小规模集成电路计算机（1964-1971）20世纪60年代中期，随着半导体工艺的发展，成功制造了集成电路。中小规模集成电路成为计算机的主要部件，主存储器也渐渐过渡到半导体存储器，使计算机的体积更小，大大降低了计算机计算时的功耗，由于减少了焊点和接插件，进一步提高了计算机的可靠性。在软件方面，有了标准化的程序设计语言和人机会话式的Basic语言，其应用领域也进一步扩大。 第四代 大规模和超大规模集成电路计算机（1971- ？）随着大规模集成电路的成功制作并用于计算机硬件生产过程，计算机的体积进一步缩小，性能进一步提高。集成更高的大容量半导体存储器作为内存储器，发展了并行技术和多机系统，出现了精简指令集计算机（RISC），软件系统工程化、理论化，程序设计自动化。微型计算机在社会上的应用范围进一步扩大，几乎所有领域都能看到计算机的“身影”。 第五代 未来计算机第五代计算机指具有人工智能的新一代计算机，它具有推理、联想、判断、决策、学习等功能。 操作系统的发展史操作系统产生的历史背景自从第一台计算机诞生以来，它就以异乎寻常的速度发展着，但早期的硬件发展速度要远远高于软件的发展速度。这时操作系统虽已出现，但应用得还比较少，运行在计算机里的程序大多是为了实现某种特定的功能而编制的。程序员需要对计算机内部各种设备的原理具有很深的了解才能够写出所需要的程序。虽然有一些高级语言已经出现，但程序员很多仍使用机器语言或汇编语言编制程序，这时只有极少数人才能够掌握程序的开发。 直到第三代集成电路计算机（1964-1971）时代的到来，操作系统才被越来越广泛地用于计算机内部。操作系统事实上就是对计算机各种资源（设备）的一种抽象。这些资源（设备）包括CPU（Central Processor Unit）、主存（Main Memory）、辅存（Secondary Memory）、键盘（Keyboard）和显示器（Monitor）等，并在此基础上提供一系列服务（比如文件系统）。程序员可以通过调用操作系统所提供的编程接口获得服务、对各种资源方便地进行访问，从而开发出实现特定功能的应用软件，提供给最终用户（end user）。因此这一时期涌现出更多的程序员、分析员和计算机系统专家，软件行业也得到了极大的发展。而对于最终用户而言，他们对应用软件的兴趣远远高于操作系统本身，在他们看来，操作系统几乎是透明的。这时的操作系统已由早期的单用户作业操作系统发展成多用户多任务的分时操作系统。也就是说，多个用户可以通过多个终端同时访问计算机资源。尽管一台计算机物理上只有一套处理器、内存和辅存等资源，但是通过分时机制，每个用户都会拥有一套虚拟的资源，就好像每个用户都拥有一台单独的计算机。 肯·汤普逊（Ken Thompson）、丹尼斯·里奇（Dennis M. Ritchie）和Unix的诞生 1965年时，AT&amp;T（美国电话电报公司）下面的贝尔实验室（Bell Labs）加入一项由通用电气（General Electric）和麻省理工学院（MIT）合作的项目；该项目要建立一套多用户、多任务、多层次（multi-user、multi-task、multi-level）的MULTICS操作系统。汤普逊（1966年）和里奇（1967年）先后加入贝尔实验室，参与了该项目。不过，一直到1969年，MULTICS项目因工作进度太慢，自己也不知道自己什么时候能完成，贝尔实验室首先撤出了该项目，就这样项目停了下来。 MULTICS项目期间，汤普逊写的一个“star travel（星际旅行）”游戏可运行于Multics之上。项目停掉以后， 正好汤普逊发现一个闲置的PDP-7机器，汤普逊决定在PDP-7上重新写“star travel（星际旅行）”游戏， 但是PDP-7上缺少程序开发程序，为了开发方便，汤普逊决定开发PDP-7操作环境，在开发期间，汤普逊发明了一门新语言：B语言，然后用B语言开发了一个操作系统，起名叫UNiplexed Information and Computing System（UNICS）， 这个时间是1969年。 为了让大家能快点玩上游戏，1971年里奇加入了汤普逊的项目中，主要任务是改进B语言，让他更成熟，1972年，里奇在B语言的基础上设计出了一门新语言，取名C语言，1973年C语言主体完成，汤普逊和里奇用C语言重写了Unix系统（第4版）。 1974年汤普逊和里奇在计算机协会交流杂志（Communications of the ACM）正式发表了UNIX论文。同时由于AT&amp;T公司受到美国反托拉斯法的诉讼，与联邦政府签署了一份协议，这份协议不允许AT&amp;T公司生产与电话和电报服务无关的设备，也不允许从事除“公用通信服务”外的任何商业活支。这样，AT&amp;T公司就陷入了不能经营计算机产品的尴尬局面。而自从在《ACM通信》中发表了关于UNIX的论文后，越来越多的人希望能够获得UNIX软件和源码。为了不违背与政府签署的协议，AT&amp;T公司既不出售UNIX、也不为其作广告、不对其提供技术支持。而同时为了满足大家的需要，AT&amp;T公司在签署简单的“仅用于教育目的”协议的前提下，将UNIX系统无偿地提供给大学，以供教学与研究。 由于AT&amp;T公司对UNIX的策略，使得UNIX在全世界得到广泛的传播，到1975年Unix发布了第6版，这个版本在UNIX发展史上，它具有里程碑式的意义。因为这是一个真正具有现代意义的操作系统，它已经几乎具备了现代（单机）操作系统的所有概念：进程、进程间通信、多用户、虚拟内存、系统的内核模式和用户模式、文件系统、中断（自陷）管理、I/O设备管理、系统接口调用（API）、用户访问界面（shell）。当然由于这时国际互联网（Internet）还没有产生，所以该版本并不具备网络功能。该版shell已经具备了很多常用的命令：ls, mkdir, rm, cd等。 慢慢的，AT&amp;T公司开始注意到Unix所带来的商业价值。公司的律师开始寻找一些手段来保护Unix，并让其成为一种商业机密。因此，第6版成为了贝尔实验室对外发布的最后一版免费UNIX，从1979年Unix的第七版开始，Unix的许可证开始禁止大学使用Unix的源码，包括在授课中学习。 1977年，加州大学伯克利分校的Bill Joy在UNIX6的基础上进行改进和增加Pascal编译器，然后发布了“1 BSD”（1st Berkeley Software Distribution），这也意味着UNIX出现了另一个分支：BSD。到了1980年，有两个最主要的Unix的版本线，一个是Berkeley的BSD UNIX，另一个是AT&amp;T的商业版Unix。在这个时候，很显然，竞争最终引发了Unix的战争。在这场战争中，好的是，软件开发人员还是能够得到Unix的源码并对其按照自己的需要和兴致进行裁剪。而不好的是，Unix开始一发不可收拾地开发不停地出现各种各样的变种。比较有名的是IBM的AIX，SUN公司的Solaris，惠普的HP-UX 理查德·马修·斯托曼（Richard Matthew Stallman）和自由软件运动 斯托曼被誉为世界第一黑客，1953年出生于美国纽约曼哈顿地区，1971年进入哈佛大学学习，同年受聘于麻省理工学院人工智能实验室（AI Laboratory），成为一名职业黑客。在AI实验室工作期间，斯托曼开发了多种今后影响深远的软件，其中最著名的就是Emacs。斯托曼在AI是一名典型的黑客，是整个黑客文化的一份子。然而进入八十年代后，黑客社群在软件工业商业化的强大压力下日渐土崩瓦解，甚至连AI实验室的许多黑客也组成了Symbolic公司，试图以专利软件来取代实验室中黑客文化的产物－－免费可自由流通的软件。斯托曼对此感到气愤与无奈。在对Symbolic进行了一段时间的抗争后，他于1985年发表了著名的GNU宣言(GNU Manifesto)，正式宣布要开始进行一项宏伟的计划：创造一套完全自由免费，兼容于Unix的操作系统GNU（GNU’s Not Unix!）。之后他又建立了自由软件基金会来协助该计划。他于1989年与一群律师起草了广为使用的GNU通用公共协议证书（GNU General Public License, GNU GPL）。所有GPL协议下的自由软件都遵循着”Copyleft”(非版权)原则：即自由软件允许用户自由拷贝、修改和销售，但是对其源代码的任何修改都必须向所有用户公开。 Minix操作系统 UNIX私有化后，在大学中不再能使用UNIX源代码。荷兰阿姆斯特丹的Vrije大学计算机科学系的Andrew S. Tanenbaum教授为了能在课堂上教授学生操作系统运作的实务细节，决定在不使用任何AT&amp;T公司的Unix源代码前提下，自行开发与UNIX兼容的操作系统，以避免版权上的争议。Minix的程序代共约12000行，教授以小型UNIX（mini-UNIX）之意，将它命名为MINIX，并且还写了一本描述Minix设计原理的书。 Linux的产生 到1991年，此时操作系统一般还都运行在大型计算机上，大部分系统在微机上还没法使用（minix可以）。林纳斯·托瓦兹（Linus Torvalds）还是芬兰赫尔辛基大学的学生，他用压岁钱和贷款搞到一台386微机，然后从美国邮购了一套minix，在minix邮寄的过程中，林纳斯·托瓦兹研究了一下Intel 80386 CPU 的硬件知识。此时GUN计划的好多软件已经发布，尤其是万众期待的C编译器也已经发布，但是GUN操作系统还没有做出来（此时GUN计划的操作系统HURD刚开始开发不久，短期内还没有完成的迹象），此时Minix也是有版权的，需要购买才能获得源码，后来在托瓦兹的学习使用中，他发现minix毕竟是用来搞教学的，功能不咋强大，因此他决定自己写个操作系统。 1991年3月29日，Linus第1次向comp.os.minix 投递消息。所发帖子的题目是“gcc on minix-386doesn’t optimize”,是有关gcc 编译器在MINIX-386 系统上运行优化的问题。 从1991年4月 份开始，Linus几乎花费了全部时间研究MINIX-386系统(Hacking the kernel)，并且尝试着移植GNU 的软件到该系统上(GNU gcc、bash、gdb 等)。并于4 月13 日在comp.os.minix 上发布说自己已经成功地将bash 移植到了MINIX 上，而且已经爱不释手、不能离开这个shell 软件了。 1991年7月3日Linus在comp.os.minix上透露他在进行操作系统的开发，并且已经想到要实现与POSIX兼容的问题了 1991年8月25日Linus在comp.os.minix上首次透露出正在开发一个(免费的)386(486)操作系统，并且说只是兴趣而已，代码不会很大，也不会象GNU 的那样专业。希望大家反馈一些对于MINIX系统中喜欢哪些特色、不喜欢什么等信息，并且说明由于实际和其它一些原因，新开发的系统刚开始MINIX很象（并且使用了MINIX的文件系统）。并且已经成功地将bash(1.08版)和gcc(1.40 版)移植到了新系统上，而且在过几个月就可以实用了。最后，Linus申明他开发的操作系统没有使用一行MINIX 的源代码；而且由于使用了386的任务切换特性，所以该操作系统不好移植（没有可移植性），并且只能使用AT硬盘。对于移植性问题，Linus当时并没有考虑。 1991年的10月5日 ，Linus在comp.os.minix 新闻组上发布消息，正式向外宣布了自己的内核系统诞生（Free minix-like kernel sources for 386-AT）。这段消息可以视为Linux 的诞生宣言，并且一直广为流传。因此10月5 日对Linux社区来说是一个特殊的日子，许多后来Linux 的新版本发布时都选择了这个日子。比如RedHat 公司选择这个日子发布它的新系统。 该系统发布后，来自世界各地的计算机爱好者都为该项目贡献了代码，到1993年，大约有100余名程序员参与了内核代码编写/修改工作，其中核心组由5人组成，此时Linux 0.99的代码大约有十万行，用户大约有10万左右。 1994年3月，Linux1.0发布，代码量17万行，当时是按照完全自由免费的协议发布，随后正式采用GPL协议。 Linux的发行版1995年1月，Bob Young创办了RedHat（小红帽），以GNU/Linux为核心，集成了400多个源代码开放的程序模块，搞出了一种冠以品牌的Linux，即RedHat Linux，称为Linux”发行版”，在市场上出售。这在经营模式上是一种创举。随后Linux的发行版逐渐增多。比较有代表性的有redhat、suse、Debian。 附件Unix和Linux发展版本历程（家谱）： Linux发行版家谱","categories":[],"tags":[{"name":"计算机&编程","slug":"计算机-编程","permalink":"http://yoursite.com/tags/计算机-编程/"}]},{"title":"用GitHub+hexo创建个博客","slug":"blog","date":"2019-03-14T08:34:20.000Z","updated":"2019-03-16T02:14:48.000Z","comments":true,"path":"2019/03/14/blog/","link":"","permalink":"http://yoursite.com/2019/03/14/blog/","excerpt":"O 踩了N多坑总结出以下经验一步一步绝对能成 mac+windows","text":"O 踩了N多坑总结出以下经验一步一步绝对能成 mac+windows 一 常见有三种博客搭建方案 workpress 一般需要独立域名(充钱)有广告，做许多东西需要升级至高级版(还是充钱)，手机版访问麻烦(所以我直接扔了那个博客) GitHub + jekyll 稍微麻烦一点 (其实是作者技术太挫) GitHub + Hexo 免费 简单 据说用的人还多 所以我选择这个 二 下面直接进入主题 👇 博客搭建首先我们需要一个GitHub账号和一个项目库怎么创建账号就不用我说了，但是创建库的时候需要提到一个细节 1 先点击这里创建 2 创建项目的是时候Repositoryname需要同Owner一样然后补齐github.io 3 然后点击 Create repository创建就好 三 环境配置Hexo有着详细的安装使用介绍 下面是我的 先怼node,jsmac: 去Node.js官网，我下载了左边的那个 然后一路安装即可 windows: Node.js下载windows就可以下载安装包，安装Node.js会包含环境变量及npm的安装，安装之后可以在命令行中输入node -v看看是否安装成功。 如果 git bash 里报错了，就去环境变量里看看有没有 nodejs，没有的话需要把nodejs地址添加一下如果已经有了，重启电脑。 再怼gitmac: 点击这里进入页面自动下载了 windows: 点击这里进入页面直接下载了记得git -v 查看是否安装成功失败了请参看其他详细git安装教程(我反正没失败过) 然后就可以安装Hexo了mac: Node.js和Git都安装好后就可以安装Hexo了。 终端执行怼下命令： sudo npm install -g hexo 如果需要输入密码就是Mac登录密码 这里就是一个大坑：Hexo官网上的安装命令是 npm install -g hexo-cli，多数教程也都是没有sudo然鹅直接怼就去就会报错权限，加sudo解决问题。 windows:npm install -g hexo-cli 将你的git与GitHub绑定由于Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址git config –global user.name “你的GitHub用户名” git config –global user.email “你的GitHub注册邮箱” 生成ssh密钥生成密钥 输入： ssh-keygen -t rsa -C “你的GitHub注册邮箱”然后回车遇到y or n? 就y 继续回车 mac: 先输入 cd ~ 然后就可以cd~/.ssh 里面会有id_rsa和rsa_rsa.pub两个文件 vim rsa_rsa.pub复制里面的内容 没有vim的话vi应该有用vi rsa_rsa.pub windows: 输入ls -a 查看所有文件 在输入cat.ssh\\id_rsa.pub打开文件 复制里面全部内容 然后打开git设置(点击头像 seeings) 然后粘贴你的密钥 Add SSH key保存 部署mac我们先找个地方创建一个文件夹这里会存放你的blog(博客)全部内容 打开终端进入这个文件夹目录 blog是你的文件夹名称 输入hexo init blog 然后cd到blog文件夹下安装npm 输入 npm install 执行下面的命令开启hexo服务器 输入 hexo s 这个时候你可以看见一个这样的博客页面了打开浏览器 输入 localhost:4000 接下来就是部署了首先介绍一下两个配置文件他们都叫_config.yml 不同的是blog里面的_config.yml是站点配置文件 而我们themes文件夹每个主题文件里也有一个_config.yml他是配置主题的文件 我们打开blog里面的_config.yml 输入vim _config.yml 翻到最下面改成这样没有就加上 你的地址在这里 这里需要注意坑二 每一个配置的 ： 后面要有一个空格！！！！然后保存站点配置 在blog文件夹目录里面执行一下生成静态页面命令 输入 hexo g (或是hexo generate) 如果有报一下错误 ERROR Local hexo not found in ~/blog ERROR Try runing: ‘npm install hexo –save’ 就执行 输入 npm install hexo –save没有报错请不要执行或者忽略 执行配置命令 hexo d (或是 hexo deploy) 这里特别注意 我就是载在这里！ 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装一个叫hexo-deployer-git东西 输入 npm install hexo-deployer-git –save 执行 hexo g执行 hexo d 倘若提示输入密码输入即可没有执行忽略 这时候就可以访问你的博客了 https://写你的.github.io/ 发布文章终端cd到blog文件夹目录 输入hexo new “文件名” 新建文章 发布部署然后 hexo g (生成静态页面)在然后 hexo d (部署到github) 如果出现了花里胡哨的错误可以在生成之前 输入 hexo clean ps: 每次更新都会等那么一会 写下更换主题吧在hexo主题里找到一款主题我的是yilia 下载这个主题 输入 git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 打开站点的_config.yml配置文件，将里面的 theme: landscape 改为 theme: yilia. 然后还是 hexo g 和 hexo d 最后访问下你的博客吧这里在看看扔出我的 张胖杰的博客 ps: 每次更新都会等那么一会!!!!!!!!","categories":[],"tags":[{"name":"计算机&编程","slug":"计算机-编程","permalink":"http://yoursite.com/tags/计算机-编程/"}]}]}